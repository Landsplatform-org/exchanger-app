"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/home/page",{

/***/ "(app-client)/./src/utils/countSumWIthFee.ts":
/*!**************************************!*\
  !*** ./src/utils/countSumWIthFee.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkCurrencies: function() { return /* binding */ checkCurrencies; },\n/* harmony export */   countSumWithFee: function() { return /* binding */ countSumWithFee; }\n/* harmony export */ });\nconst checkCurrencies = (firstCur, secondCur, param)=>{\n    let { ...args } = param;\n    switch(true){\n        case firstCur === (\"1\" || 0) || secondCur === (\"1\" || 0):\n            return countUSDtoUSD({\n                ...args\n            });\n    }\n};\nconst countUSDtoUSD = (param)=>{\n    let { ...args } = param;\n    console.log({\n        ...args\n    });\n    let resWOFee;\n    let fee;\n    switch(args.type){\n        case \"send\":\n            return (+args.sum * args.sendfee + +args.sum).toFixed(2);\n        case \"receive\":\n            {\n                resWOFee = +args.sum / 1;\n                fee = +resWOFee * args.receivefee;\n                return (resWOFee - fee).toFixed(3).toString();\n            }\n    }\n};\nconst countSumWithFee = (type, sum, sendfee, receivefee, rate)=>{\n    let resWOFee;\n    let fee;\n    switch(type){\n        case \"send\":\n            return (+sum * sendfee + +sum).toFixed(2);\n        case \"receive\":\n            {\n                resWOFee = +sum / rate;\n                fee = +resWOFee * receivefee;\n                return (resWOFee - fee).toFixed(3).toString();\n            }\n        default:\n            return \"\";\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1jbGllbnQpLy4vc3JjL3V0aWxzL2NvdW50U3VtV0l0aEZlZS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLGtCQUFrQixDQUFDQyxVQUFrQkM7UUFBbUIsRUFBRSxHQUFHQyxNQUFNO0lBQzlFLE9BQVE7UUFDTixLQUFNRixhQUFjLFFBQU8sQ0FBRSxLQUFNQyxjQUFlLFFBQU8sQ0FBRTtZQUN6RCxPQUFPRSxjQUFjO2dCQUFFLEdBQUdELElBQUk7WUFBQztJQUNuQztBQUNGLEVBQUM7QUFFRCxNQUFNQyxnQkFBZ0I7UUFBQyxFQUFFLEdBQUdELE1BQU07SUFDaENFLFFBQVFDLEdBQUcsQ0FBQztRQUFDLEdBQUdILElBQUk7SUFBQTtJQUNwQixJQUFJSTtJQUNKLElBQUlDO0lBRUosT0FBUUwsS0FBS00sSUFBSTtRQUNmLEtBQUs7WUFDSCxPQUFPLENBQUMsQ0FBQ04sS0FBS08sR0FBRyxHQUFHUCxLQUFLUSxPQUFPLEdBQUcsQ0FBQ1IsS0FBS08sR0FBRyxFQUFFRSxPQUFPLENBQUM7UUFDeEQsS0FBSztZQUFXO2dCQUNiTCxXQUFhLENBQUNKLEtBQUtPLEdBQUcsR0FBRztnQkFDekJGLE1BQU0sQ0FBQ0QsV0FBV0osS0FBS1UsVUFBVTtnQkFDakMsT0FBTyxDQUFDTixXQUFXQyxHQUFFLEVBQUdJLE9BQU8sQ0FBQyxHQUFHRSxRQUFRO1lBQzVDO0lBQ0o7QUFDRjtBQUdPLE1BQU1DLGtCQUFrQixDQUFDTixNQUFjQyxLQUFhQyxTQUFpQkUsWUFBb0JHO0lBQzlGLElBQUlUO0lBQ0osSUFBSUM7SUFFSixPQUFRQztRQUNOLEtBQUs7WUFDSCxPQUFPLENBQUMsQ0FBQ0MsTUFBTUMsVUFBVSxDQUFDRCxHQUFFLEVBQUdFLE9BQU8sQ0FBQztRQUN6QyxLQUFLO1lBQVc7Z0JBQ2JMLFdBQWEsQ0FBQ0csTUFBTU07Z0JBQ3BCUixNQUFNLENBQUNELFdBQVdNO2dCQUNsQixPQUFPLENBQUNOLFdBQVdDLEdBQUUsRUFBR0ksT0FBTyxDQUFDLEdBQUdFLFFBQVE7WUFDNUM7UUFDRjtZQUNFLE9BQU87SUFDWDtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3V0aWxzL2NvdW50U3VtV0l0aEZlZS50cz80NWYzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjaGVja0N1cnJlbmNpZXMgPSAoZmlyc3RDdXI6IHN0cmluZywgc2Vjb25kQ3VyOiBzdHJpbmcsIHsgLi4uYXJncyB9KSA9PiB7XHJcbiAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICBjYXNlIChmaXJzdEN1ciA9PT0gKFwiMVwiIHx8IFwiMlwiKSB8fCBzZWNvbmRDdXIgPT09IChcIjFcIiB8fCBcIjJcIikpOiBcclxuICAgICAgcmV0dXJuIGNvdW50VVNEdG9VU0QoeyAuLi5hcmdzIH0pXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBjb3VudFVTRHRvVVNEID0gKHsgLi4uYXJncyB9KSA9PiB7XHJcbiAgY29uc29sZS5sb2coey4uLmFyZ3N9KVxyXG4gIGxldCByZXNXT0ZlZTtcclxuICBsZXQgZmVlO1xyXG5cclxuICBzd2l0Y2ggKGFyZ3MudHlwZSkge1xyXG4gICAgY2FzZSBcInNlbmRcIjpcclxuICAgICAgcmV0dXJuICgrYXJncy5zdW0gKiBhcmdzLnNlbmRmZWUgKyArYXJncy5zdW0pLnRvRml4ZWQoMik7XHJcbiAgICBjYXNlIFwicmVjZWl2ZVwiOiB7XHJcbiAgICAgICByZXNXT0ZlZSA9ICgoK2FyZ3Muc3VtIC8gMSkpXHJcbiAgICAgICBmZWUgPSArcmVzV09GZWUgKiBhcmdzLnJlY2VpdmVmZWVcclxuICAgICAgIHJldHVybiAocmVzV09GZWUgLSBmZWUpLnRvRml4ZWQoMykudG9TdHJpbmcoKVxyXG4gICAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBjb3VudFN1bVdpdGhGZWUgPSAodHlwZTogc3RyaW5nLCBzdW06IHN0cmluZywgc2VuZGZlZTogbnVtYmVyLCByZWNlaXZlZmVlOiBudW1iZXIsIHJhdGU6IG51bWJlcikgPT4ge1xyXG4gIGxldCByZXNXT0ZlZTtcclxuICBsZXQgZmVlO1xyXG5cclxuICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgIGNhc2UgXCJzZW5kXCI6XHJcbiAgICAgIHJldHVybiAoK3N1bSAqIHNlbmRmZWUgKyArc3VtKS50b0ZpeGVkKDIpO1xyXG4gICAgY2FzZSBcInJlY2VpdmVcIjoge1xyXG4gICAgICAgcmVzV09GZWUgPSAoKCtzdW0gLyByYXRlKSlcclxuICAgICAgIGZlZSA9ICtyZXNXT0ZlZSAqIHJlY2VpdmVmZWVcclxuICAgICAgIHJldHVybiAocmVzV09GZWUgLSBmZWUpLnRvRml4ZWQoMykudG9TdHJpbmcoKVxyXG4gICAgICB9O1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgfVxyXG59O1xyXG4iXSwibmFtZXMiOlsiY2hlY2tDdXJyZW5jaWVzIiwiZmlyc3RDdXIiLCJzZWNvbmRDdXIiLCJhcmdzIiwiY291bnRVU0R0b1VTRCIsImNvbnNvbGUiLCJsb2ciLCJyZXNXT0ZlZSIsImZlZSIsInR5cGUiLCJzdW0iLCJzZW5kZmVlIiwidG9GaXhlZCIsInJlY2VpdmVmZWUiLCJ0b1N0cmluZyIsImNvdW50U3VtV2l0aEZlZSIsInJhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-client)/./src/utils/countSumWIthFee.ts\n"));

/***/ })

});